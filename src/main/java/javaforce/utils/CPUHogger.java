package javaforce.utils;

import java.util.*;

import javaforce.JFAWT;

/**
 *
 * @author User
 */
public class CPUHogger extends javax.swing.JFrame {

  /**
   * Creates new form CPUHogger
   */
  public CPUHogger() {
    initComponents();
    JFAWT.centerWindow(this);
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    threads = new javax.swing.JSpinner();
    start = new javax.swing.JButton();
    status = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("CPU Hogger");

    jLabel1.setText("# of Threads");

    threads.setModel(new javax.swing.SpinnerNumberModel(1, 1, 8, 1));

    start.setText("Start");
    start.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        startActionPerformed(evt);
      }
    });

    status.setText("Status : Idle");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(start, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(threads, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(threads, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(18, 18, 18)
        .addComponent(start)
        .addGap(18, 18, 18)
        .addComponent(status)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void startActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startActionPerformed
    start();
  }//GEN-LAST:event_startActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new CPUHogger().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private javax.swing.JButton start;
  private javax.swing.JLabel status;
  private javax.swing.JSpinner threads;
  // End of variables declaration//GEN-END:variables


  private volatile boolean running = false;

  private void start() {
    if (running) {
      running = false;
      start.setText("Start");
      status.setText("Status : Idle");
    } else {
      running = true;
      startThreads();
      start.setText("stop");
      int cnt = (Integer)threads.getValue();
      status.setText("Status : " + cnt + " threads running");
    }
  }

  private void startThreads() {
    int cnt = (Integer)threads.getValue();
    for(int a=0;a<cnt;a++) {
      Hogger hogger = new Hogger();
      hogger.start();
    }
  }

  private class Hogger extends Thread {
    public int c = 0;
    public void run() {
      Random r = new Random();
      while (running) {
        float f = r.nextFloat();
        double d = Math.sin(f);
        int z = convert(d);
        c += z;
      }
    }
    private int convert(double d) {
      return (int)(d + 1);
    }
  }
}
